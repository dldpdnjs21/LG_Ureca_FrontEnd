<자바스크립트>  ==> 개념없다!! (자료형을 명시하지 않는다~!!)  
                      ==> 동적타이핑(동적프로그램) 언어(JavaScript, Python)
     var v;
          v='안녕';
         v=1000;
         v=new Date( );
 
  - 웹브라우저에서 실행되는 프로그램이다!!
    my.js
  - HTML문서내에서 실행(html에 종속적이다,브라우저에서 실행된다!!)
  - HTML문서(정적페이지) 
       ---> JavaScript적용 (동적페이지) 
  - HTML문서를 통해 입력된 데이터를 얻어오고
         데이터에 대한 유효성 검사를 할 때 사용.
  - HTML문서에 대한 조작(태그,속성,스타일)!!
  
  ※결론) 자바스크립트를 왜(어디서) 사용하는가?
      - 문서 조작 (태그와 속성, CSS)
         ==> 조작에 필요한 데이터가 외부에 존재한다면(현재HTML없을시) Ajax를 사용!!
      - 유효성 검사 (서버에게 데이터를 보내기 전에 검사)   

===================================================================
<<JavaScript와 Java비교>>

1. JavaScript: 클라이언트(사용자,브라우저) 스크립트  : 브라우저에서 실행!!  
   JSP(Java) : 서버                                    스크립트  : JVM에서 실행!!
   
2. JavaScript의 위치
    ---> HTML문서내에 포함되어서 실행.
         (HTML문서내의 어떤 위치라도 정의 가능)
    
   <html>
      <head>
         <script>
                       프로그램영역!!
            ----> 변수선언, 함수(function)정의                       
         </script>
      </head>
      ----------------------------------------
      <body>
         <script>
                         프로그램영역!!
              ----> 함수 호출
         </script>
      </body>
   </html> 
    
3. 자료형을 선언, 정의하지 않는다!! ★    
    
   자바case)
      String name="홍길동";
             name="길라임";
             name=3000;   (X)
             
   자바스크립트case)
      String name="홍길동"; (X) 에러발생!!
             
             name="홍길동"; (O) 자료형 선언하지 않고 사용!!
       
         let su;  ---> 변수선언      
          su=2000;        ---> number타입
          su="김주원";     ---> String타입 
                               //대입되는 데이터에 따라 자료형이 변환됨
          su=true;        ---> boolean타입
          su= new Date(); ---> Date타입
 
4. 자바스크립트에서의 문자열(text) 표현
    ---> 작은 따옴표와 큰 따옴표를 구분 없이 사용!!
                ---> 전혀 차이가 없음.
    name1= "홍길동"; (O)                
    name2= '홍길동'; (O)                
    name3= "김주원'; (X)
    name4= `길라임`; (O)

5. 자바스크립트는 구분자, 종결자 역할을 하는 ';'을 생략하는 것이 가능.
    ==> 이유: 라인(줄바꿈)을 통해 서로 다른 문장을 구분하기 때문.
    
    name='길동'
    age=13
    ==> (O)

    name="라임" age=15
    ==> (X)

    name="주원"; age=17
    ==> (O)
    
    
6. 자바스크립트  /(몫), %(나머지)

    10/5  ---> 2
    10%5  ---> 0
    
    10/3  ---> 3.33333333        
              parseInt(3.33333333)  ---> 3
    10%3  ---> 1
    
7. JavaScript내의 주석
    - Java와 동일
    - //설명문    : 라인주석    
      /*
                  설명문1
                  설명문2
                  설명문3
      */       : 블럭주석
      
    - HTML주석은 <script>태그를 인식하지 못하는 브라우저를 위해 정의!!
    <script>
      <!--
         alert('안녕~!!');
      -->
    </script>    
    
    ==> alert 실행?  ==> 실행잘됨.

8. 문자열 비교
    자바case)
         "java".equals("JAVA")   ==> (O) 문자열 내용 비교
         "java" == "JAVA"        ==> (O) 메모리 주소 비교
         
   자바스크립트case)
        "javascript".equals("JAVASCRIPT") ==> (X) 에러발생         

        "javascript" == "JAVASCRIPT"      ==> (O) 문자열 내용 비교
        
9. '==' '!='  연산자 와           '==='연산자   '!=='
   ----------       -----------
     등가 연산자                   등가연산자 (엄격한 비교연산자)
     데이터 내용만 비교          1. 자료형 비교  2. 내용비교
   (자동 형변환 발생)
   
     관련연산자)   != (비교연산자)  과      !== (엄격한 비교연산자)
   
     예)  
        100 == '100'    --->true  내용만 같다면 자동형변환 해서 비교
        100 === '100'   --->false  1.자료형비교 (자료형이 다르면 false) 
                                   2.자료형 같았을때 내용비교
   
10. 조건문

   if(조건식){
          조건식의 결과가 참일 때 실행할 문장;
   }
   --->실행할 문장이 한개였을때 영역괄호{}는 생략가능!!
   
   if(조건식){
          조건식의 결과가 참일 때 실행할 문장;
   }else{
          조건식의 결과가 거짓일 때 실행할 문장;
   }


   if(조건식1){
          조건식1의 결과가 참일 때 실행할 문장;
   }else if(조건식2){
          조건식1의 결과가 거짓이고!!
          조건식2의 결과가 참일 때 실행할 문장;
   }else{
          조건식1,2의 결과가 거짓일 때 실행할 문장;
   }

   ※ 차이점
     if(조건식 ==> boolean, 숫자, 객체){
     
     }

     숫자: 0인 수(false), 0아닌 수(true)로 구분
     객체: 브라우저에서 지원되는 객체인지 아닌지 판별.
        ----> 변수에 값이 존재하는지 판단.
        
   존재하는 객체(문자열, 브라우저가 지원하는 객체)  ---> true
   null, undefined    ""                    ---> false
         ----------
             초기화 되지 않은 변수     
        
11. 빈문자열 체크
   
    1) str.length == 0
       --> 자바스크립트 문자열 길이 구하기 : str.length 사용
           str.length()  : 에러발생: length()메소드 지원X
       
    2) str == ''
            
    ---> 2)번을 많이 사용
    
12. 함수(메소드) 정의!! ★★
    
     자바case)
        void hello(String name, int age){}
        int hello(String name, int age){return 100;}
        
     자바스크립트case)  
        function hello(name, age){}
        function hello(name, age){
              if(age == undefined){
                      처리코드
              }
        return 100;}
        ==>호출:  hello('길동',13);
        ==>호출:  hello("길동");
        ==>호출:  hello();
        
    
        var hello = function(name, age) {      };
        ==> 호출: hello('주원',15);


     함수형식)
        function 함수명(){
        
        }  -----> return; 생략가능
        
        function 함수명(변수명1, 변수명2){
        
          return "리턴데이터";
        }
        
                ※주의: 자바스크립트의 함수는 오버로딩을 제공할까요?
          ----> 기본적으로 제공X        
        
       function hello(){
                     안녕!!
       } 
         
       hello();  호출  ---->  안녕!!
       
       function hello(){
                     씬짜오!!
       }   
       ==> 에러가 발생하지 않는다!!
       
       hello();  호출  ---->  씬짜오!!    
        
       function hello(name){
                     봉쥬르!!
       }   
       ==> 에러가 발생하지 않는다!!
       
       hello();          호출  ---->  봉쥬르!!                     
       hello('나길동');       ----> 봉쥬르!!               
       hello('나길동',13);    ----> 봉쥬르!!
       ==> 함수호출시 매개변수(인자)의 갯수와 상관없이 함수명만 일치하면 호출 가능!!
       ==> 같은 영역(파일)에  동일한 이름의 함수가 여러개 존재한다면(인자의 갯수는 상관없이)  
                      제일 아래에 있는 함수로 overwrite됨!!                   
        
13. HTML태그내의 속성 중 on접두사를 갖는 속성은 이벤트 속성. (~ 했을때)
  예) <input type='button' value='버튼' onclick="자바스크립트 코드">
                                              ===> 주로 함수 호출
                                     ===> 버튼을 클릭했을때
     onfocus : 포커스가 들어왔을때                                              
     onblur : 포커스를 잃었을때
     onchange : select태그에서 선택을 바꾸었을때
     onkeydown : 키보드를 눌렀을때
     onkeyup   : 키보드 땠을때
     onmouseover   : 마우스가 진입했을때, 엘리먼트위에 올려졌을때 
     onmouseout    : 마우스가 나갔을때
     onmousedown   : 마우스를 클릭했을때   
    
14. <배열 Array>
            자바:           자료형 [] 변수명 = new 자료형[size];
            자바스크립트:             변수명 = new Array(size);
                                                          변수명 = new Array(데이터1,데이터2,데이터3,....);
                                                          변수명 = [데이터1,데이터2,데이터3,....];
   예) var myArry = new Array(5);
        ===> 배열의 크기(length)가 5인 배열 생성!!
        ===> ※ 변수선언에 자료형 뿐만 아니라 []를 명시하지 않음.
         var String []myArry = new Array(5);   ===> (X)
         var        []myArry = new Array(5);   ===> (X)
    - 자바스크립트 배열은 한 변수명에 여러 자료형의 데이터를 입력할 수 있음. (비권장)
    - 가변길이 배열!! (정해진 범위를 넘어서는 데이터에 대해서도 입력가능)
    - 데이터 집합을 표현할 때 {}를 사용하지 않고 []를 사용.
       ===> 자바) int [] su = {1,2,3,4};
       
                      자바스크립트)  var su = {1,2,3,4};  ===> 에러발생!!
                       var su = [1,2,3,4,'안녕',new Date( )];   ===> (O)
                       
   ※ 참고 ★★
    '{ }'표기는 JSON(JavaScript Object Notation)표현!!
    
  ===> 형식) 자바의 Map 또는 Properties와 비슷. (key,value쌍으로 데이터를 저장!!)
             key==>변수명 , value==>데이터!!
                                 
  ===> var 변수명 = {key1:value, key2:value, key3:value};                       
                   key: 데이터를 저장하기 위한 유일한 변수.
                   value: 저장할 데이터.
                   
   var v = {  } ;   ===> v는 Object다!!  
     ===> var v = new Object(); 와 동일함!!
    
   예)
     var arr = {11,22,33}; (X)===> 에러발생: {}는 JSON
                                        JSON은  {key:value}!!
     var arr = [11,22,33]; (O)
     ---> 데이터 접근법)   arr[0]  arr[1]  arr[2]
     
     var p = {name:'홍길동', age:13, job:'학생',  etc: {  abc:{}  }   };
                     또는
     var p = {"name":"홍길동", "age":13, "job":"학생"}; ==> jQuery에서 이상적.
      
     ---> 데이터 접근법1)  p.name   p.age  p.job    p.etc[2]   

                  데이터 접근법2)  p['name']   p['age']   p['job']       
                  
     문제)  "홍길동" , 13 , "학생" 
         "길라임" , 15 , "학생"
         "김주원" , 17 , "학생"
     ==> 데이터를 한개의 변수명으로 저장하시오.
       var persons = [
		              {name:"홍길동" , age:13 , job:"학생" }
		              ,         
		              {name:"길라임" , age:15 , job:"학생" }
		              ,         
		              {name:"김주원" , age:17 , job:"학생" }
                     ];
                     
15.
      자바 GUI)
     JTextField tf = new JTextField();
         ---> 데이터 얻을 때
                                            변수명 = tf.getText();    
         ---> 데이터 줄 때    
                        tf.setText(데이터);
    
         자바스크립트)
       <input type='text'  name='tf'  value="abc">
         ---> 데이터 얻을 때
                                             변수명 = tf.getValue();
                         ==> 변수명        = tf.value;   (O)
                                                   document.form명.이름.value;
         ---> 데이터 줄 때                               
                         tf.setValue(데이터);                               
                         ==> tf.value = 데이터;   (O)      
                               
                               
            HTML문서 (폼)

<html>
   <head>
          <script>
              //폼안의 데이터 가져오기(get)
              var uname = document.frm.username.value;
        
              //폼안의 데이터 주기(설정하기set)
              document.frm.username.value='홍길동';
          </script>
   </head>
   <body>
        <form name='frm'>
             이름: <input type=text name=username><br>
             나이: <input type=text name=userage>
        </form>        
   </body>
</html>
                               
                               
                               
                               
                     
                     
                              


     










        

                    
                






          